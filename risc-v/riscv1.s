.data #входные данные
arr_len: .word 9 
arr_in: .word 66, 77, -15, 2, 59, -5, 23, 72, 73
k_stat: .word 0 

.text 
__start:
  .globl __start #начало программы
  
  # Сортируем массим методом buble sort
  la t0, arr_in #временные регистры
  la t1, arr_len #загружваем адрес во временные регистры
  lw t1, 0(t1) #загружааем по ажресу внешний счетчик
outer_loop: 
  addi t1, t1, -1 #добавляем -1 к счеткику
  beq t1, zero, return #если отсчитали до 0 возвращаем значение
  li t2, 0 #внутренний счетчик
  la t0, arr_in #указатель на 0массив во временные регистры
inner_loop:
  lw t3, 0(t0) #загружем эелементы
  lw t4, 4(t0) 
  blt t3, t4, loop_back # пропускаям свап (если t3 <  t4)
  
  #меняем элементы местами, если второй меньше
  sw t3, 4(t0) #записываем t3 в 4t0
  sw t4, 0(t0)
loop_back:
  addi t2, t2, 1 
  addi t0, t0, 4
  beq t1, t2, outer_loop #если t1==t2 выходим из внутренноего цикла
  j inner_loop #безусловыный переход к началу

return: #если вышли из внешнего цикла возващаем значаения
  la t0, arr_in #обнуление счетка
  la t1, k_stat #закгрука адреса статиски 
  lw t1, k_stat #закгрука статиски 
  
  slli t1, t1, 2 # умножаем на 4, чтобы получить нужный сдвиг в массиве
  add t0, t0, t1
  lw a2, 0(t0) #Сохраняем результат в регистре a2

  mv a1, zero # return 0 результат без ошибок
  addi a0, zero, 17 #syscall number 17(terminate) номер системнго вызова 
  ecall #делаем системный вызов